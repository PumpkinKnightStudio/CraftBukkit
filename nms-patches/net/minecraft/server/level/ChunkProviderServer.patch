--- a/net/minecraft/server/level/ChunkProviderServer.java
+++ b/net/minecraft/server/level/ChunkProviderServer.java
@@ -79,6 +79,24 @@
         this.clearCache();
     }
 
+    // CraftBukkit start - properly implement isChunkLoaded
+    public boolean isChunkLoaded(int chunkX, int chunkZ) {
+        PlayerChunk chunk = this.playerChunkMap.getUpdatingChunk(ChunkCoordIntPair.pair(chunkX, chunkZ));
+        if (chunk == null) {
+            return false;
+        }
+        return chunk.getFullChunk() != null;
+    }
+
+    public Chunk getChunkUnchecked(int chunkX, int chunkZ) {
+        PlayerChunk chunk = this.playerChunkMap.getUpdatingChunk(ChunkCoordIntPair.pair(chunkX, chunkZ));
+        if (chunk == null) {
+            return null;
+        }
+        return chunk.getFullChunkUnchecked();
+    }
+    // CraftBukkit end
+
     @Override
     public LightEngineThreaded getLightEngine() {
         return this.lightEngine;
@@ -123,7 +141,7 @@
             for (int l = 0; l < 4; ++l) {
                 if (k == this.cachePos[l] && chunkstatus == this.cacheStatus[l]) {
                     ichunkaccess = this.cacheChunk[l];
-                    if (ichunkaccess != null || !flag) {
+                    if (ichunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
                         return ichunkaccess;
                     }
                 }
@@ -169,12 +187,12 @@
             if (playerchunk == null) {
                 return null;
             } else {
-                Either<IChunkAccess, PlayerChunk.Failure> either = (Either) playerchunk.b(ChunkStatus.FULL).getNow((Object) null);
+                Either<IChunkAccess, PlayerChunk.Failure> either = (Either) playerchunk.b(ChunkStatus.FULL).getNow(null); // CraftBukkit - decompile error
 
                 if (either == null) {
                     return null;
                 } else {
-                    IChunkAccess ichunkaccess1 = (IChunkAccess) either.left().orElse((Object) null);
+                    IChunkAccess ichunkaccess1 = (IChunkAccess) either.left().orElse(null); // CraftBukkit - decompile error
 
                     if (ichunkaccess1 != null) {
                         this.a(k, ichunkaccess1, ChunkStatus.FULL);
@@ -201,7 +219,15 @@
         int l = 33 + ChunkStatus.a(chunkstatus);
         PlayerChunk playerchunk = this.getChunk(k);
 
-        if (flag) {
+        // CraftBukkit start - don't add new ticket for currently unloading chunk
+        boolean currentlyUnloading = false;
+        if (playerchunk != null) {
+            PlayerChunk.State oldChunkState = PlayerChunk.getChunkState(playerchunk.oldTicketLevel);
+            PlayerChunk.State currentChunkState = PlayerChunk.getChunkState(playerchunk.getTicketLevel());
+            currentlyUnloading = (oldChunkState.isAtLeast(PlayerChunk.State.BORDER) && !currentChunkState.isAtLeast(PlayerChunk.State.BORDER));
+        }
+        if (flag && !currentlyUnloading) {
+            // CraftBukkit end
             this.chunkMapDistance.a(TicketType.UNKNOWN, chunkcoordintpair, l, chunkcoordintpair);
             if (this.a(playerchunk, l)) {
                 GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
@@ -220,7 +246,7 @@
     }
 
     private boolean a(@Nullable PlayerChunk playerchunk, int i) {
-        return playerchunk == null || playerchunk.getTicketLevel() > i;
+        return playerchunk == null || playerchunk.oldTicketLevel > i; // CraftBukkit using oldTicketLevel for isLoaded checks
     }
 
     public boolean isLoaded(int i, int j) {
@@ -282,19 +308,19 @@
     public boolean a(Entity entity) {
         long i = ChunkCoordIntPair.pair(MathHelper.floor(entity.locX()) >> 4, MathHelper.floor(entity.locZ()) >> 4);
 
-        return this.a(i, PlayerChunk::b);
+        return this.a(i, (Function<PlayerChunk, CompletableFuture<Either<Chunk, PlayerChunk.Failure>>>) PlayerChunk::b); // CraftBukkit - decompile error
     }
 
     @Override
     public boolean a(ChunkCoordIntPair chunkcoordintpair) {
-        return this.a(chunkcoordintpair.pair(), PlayerChunk::b);
+        return this.a(chunkcoordintpair.pair(), (Function<PlayerChunk, CompletableFuture<Either<Chunk, PlayerChunk.Failure>>>) PlayerChunk::b); // CraftBukkit - decompile error
     }
 
     @Override
     public boolean a(BlockPosition blockposition) {
         long i = ChunkCoordIntPair.pair(blockposition.getX() >> 4, blockposition.getZ() >> 4);
 
-        return this.a(i, PlayerChunk::a);
+        return this.a(i, (Function<PlayerChunk, CompletableFuture<Either<Chunk, PlayerChunk.Failure>>>) PlayerChunk::a); // CraftBukkit - decompile error
     }
 
     private boolean a(long i, Function<PlayerChunk, CompletableFuture<Either<Chunk, PlayerChunk.Failure>>> function) {
@@ -316,11 +342,31 @@
 
     @Override
     public void close() throws IOException {
-        this.save(true);
+        // CraftBukkit start
+        close(true);
+    }
+
+    public void close(boolean save) throws IOException {
+        if (save) {
+            this.save(true);
+        }
+        // CraftBukkit end
         this.lightEngine.close();
         this.playerChunkMap.close();
     }
 
+    // CraftBukkit start - modelled on below
+    public void purgeUnload() {
+        this.world.getMethodProfiler().enter("purge");
+        this.chunkMapDistance.purgeTickets();
+        this.tickDistanceManager();
+        this.world.getMethodProfiler().exitEnter("unload");
+        this.playerChunkMap.unloadChunks(() -> true);
+        this.world.getMethodProfiler().exit();
+        this.clearCache();
+    }
+    // CraftBukkit end
+
     public void tick(BooleanSupplier booleansupplier) {
         this.world.getMethodProfiler().enter("purge");
         this.chunkMapDistance.purgeTickets();
@@ -340,12 +386,12 @@
         this.lastTickTime = i;
         WorldData worlddata = this.world.getWorldData();
         boolean flag = this.world.isDebugWorld();
-        boolean flag1 = this.world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING);
+        boolean flag1 = this.world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && !world.getPlayers().isEmpty(); // CraftBukkit
 
         if (!flag) {
             this.world.getMethodProfiler().enter("pollingChunks");
             int k = this.world.getGameRules().getInt(GameRules.RANDOM_TICK_SPEED);
-            boolean flag2 = worlddata.getTime() % 400L == 0L;
+            boolean flag2 = world.ticksPerAnimalSpawns != 0L && worlddata.getTime() % world.ticksPerAnimalSpawns == 0L; // CraftBukkit
 
             this.world.getMethodProfiler().enter("naturalSpawnCount");
             int l = this.chunkMapDistance.b();
@@ -532,12 +578,18 @@
 
         @Override
         protected boolean executeNext() {
+        // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
+        try {
             if (ChunkProviderServer.this.tickDistanceManager()) {
                 return true;
             } else {
                 ChunkProviderServer.this.lightEngine.queueUpdate();
                 return super.executeNext();
             }
+        } finally {
+            playerChunkMap.callbackExecutor.run();
+        }
+        // CraftBukkit end
         }
     }
 }
