--- a/net/minecraft/world/level/block/entity/TileEntityFurnace.java
+++ b/net/minecraft/world/level/block/entity/TileEntityFurnace.java
@@ -39,6 +39,17 @@
 import net.minecraft.world.level.block.state.IBlockData;
 import net.minecraft.world.phys.Vec3D;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+// CraftBukkit end
+
 public abstract class TileEntityFurnace extends TileEntityContainer implements IWorldInventory, RecipeHolder, AutoRecipeOutput, ITickable {
 
     private static final int[] g = new int[]{0};
@@ -166,6 +177,36 @@
         return map;
     }
 
+    // CraftBukkit start - add fields and methods
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     private static boolean b(Item item) {
         return TagsItem.NON_FLAMMABLE_WOOD.isTagged(item);
     }
@@ -252,12 +293,23 @@
                     this.cookTime = MathHelper.clamp(this.cookTime - 2, 0, this.cookTimeTotal);
                 }
             } else {
-                IRecipe<?> irecipe = (IRecipe) this.world.getCraftingManager().craft(this.c, this, this.world).orElse((Object) null);
+                IRecipe irecipe = this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).orElse(null); // Eclipse fail
 
                 if (!this.isBurning() && this.canBurn(irecipe)) {
-                    this.burnTime = this.fuelTime(itemstack);
+                    // CraftBukkit start
+                    CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                    FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(this.world, this.position), fuel, fuelTime(itemstack));
+                    this.world.getServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                    if (furnaceBurnEvent.isCancelled()) {
+                        return;
+                    }
+
+                    this.burnTime = furnaceBurnEvent.getBurnTime();
                     this.ticksForCurrentFuel = this.burnTime;
-                    if (this.isBurning()) {
+                    if (this.isBurning() && furnaceBurnEvent.isBurning()) {
+                        // CraftBukkit end
                         flag1 = true;
                         if (!itemstack.isEmpty()) {
                             Item item = itemstack.getItem();
@@ -319,11 +371,38 @@
             ItemStack itemstack1 = irecipe.getResult();
             ItemStack itemstack2 = (ItemStack) this.items.get(2);
 
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), source, result);
+            this.world.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    this.items.set(2, itemstack1.cloneItemStack());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.add(itemstack1.getCount());
+                } else {
+                    return;
+                }
+            }
+
+            /*
             if (itemstack2.isEmpty()) {
                 this.items.set(2, itemstack1.cloneItemStack());
             } else if (itemstack2.getItem() == itemstack1.getItem()) {
                 itemstack2.add(1);
             }
+            */
+            // CraftBukkit end
 
             if (!this.world.isClientSide) {
                 this.a(irecipe);
@@ -348,7 +427,7 @@
     }
 
     protected int getRecipeCookingTime() {
-        return (Integer) this.world.getCraftingManager().craft(this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200);
+        return (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail
     }
 
     public static boolean isFuel(ItemStack itemstack) {
@@ -475,14 +554,20 @@
     @Override
     public void b(EntityHuman entityhuman) {}
 
-    public void d(EntityHuman entityhuman) {
-        List<IRecipe<?>> list = this.a(entityhuman.world, entityhuman.getPositionVector());
+    public void d(EntityHuman entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
+        List<IRecipe<?>> list = this.a(entityhuman.world, entityhuman.getPositionVector(), entityhuman, itemstack, amount); // CraftBukkit
 
         entityhuman.discoverRecipes(list);
         this.n.clear();
     }
 
     public List<IRecipe<?>> a(World world, Vec3D vec3d) {
+        // CraftBukkit start
+        return this.a(world, vec3d, null, null, 0);
+    }
+
+    public List<IRecipe<?>> a(World world, Vec3D vec3d, EntityHuman entityhuman, ItemStack itemstack, int amount) {
+        // CraftBukkit end
         List<IRecipe<?>> list = Lists.newArrayList();
         ObjectIterator objectiterator = this.n.object2IntEntrySet().iterator();
 
@@ -491,14 +576,14 @@
 
             world.getCraftingManager().getRecipe((MinecraftKey) entry.getKey()).ifPresent((irecipe) -> {
                 list.add(irecipe);
-                a(world, vec3d, entry.getIntValue(), ((RecipeCooking) irecipe).getExperience());
+                a(world, vec3d, entry.getIntValue(), ((RecipeCooking) irecipe).getExperience(), entityhuman, itemstack, amount); // CraftBukkit
             });
         }
 
         return list;
     }
 
-    private static void a(World world, Vec3D vec3d, int i, float f) {
+    private void a(World world, Vec3D vec3d, int i, float f, EntityHuman entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
         int j = MathHelper.d((float) i * f);
         float f1 = MathHelper.h((float) i * f);
 
@@ -506,6 +591,14 @@
             ++j;
         }
 
+        // CraftBukkit start - fire FurnaceExtractEvent
+        if (amount != 0) {
+            FurnaceExtractEvent event = new FurnaceExtractEvent((Player) entityhuman.getBukkitEntity(), CraftBlock.at(world, position), org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(itemstack.getItem()), amount, j);
+            world.getServer().getPluginManager().callEvent(event);
+            j = event.getExpToDrop();
+        }
+        // CraftBukkit end
+
         while (j > 0) {
             int k = EntityExperienceOrb.getOrbValue(j);
 
